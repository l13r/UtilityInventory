# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UtilityInventoryDialog
                                 A QGIS plugin
 Plugin para realizar inventario en redes de servicios públicos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Jorge López Rebollo
        email                : jorge_lopez@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import (
    QgsMapLayer,
    QgsVectorLayer,
    QgsGeometry,
    QgsProject,
    QgsFeature,
    QgsMessageLog,
    QgsWkbTypes,
    QgsPointXY,
    QgsCategorizedSymbolRenderer,
    QgsRendererCategory,
    QgsSymbol,
    QgsSvgMarkerSymbolLayer,
    QgsApplication,
    QgsCoordinateTransform,
    QgsCoordinateReferenceSystem
)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'utility_inventory_dialog_base.ui'))

class UtilityInventoryDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""

        super(UtilityInventoryDialog, self).__init__(parent)

        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)

        #Definición inicial de los tipos de elementos según la red
        elem1 = ['Acometida', 'Contador', 'Valvula', 'Ventosa', 'Otro']
        elem2 = ['Acometida', 'Aliviadero', 'Imbornal', 'Pozo de registro', 'Otro']
        elem3 = ['Contador', 'Generador', 'Interruptor', 'Transformador', 'Torre', 'Otro']
        elem4 = ['Acometida', 'Contador', 'Llave', 'Toma de presión', 'Otro']

        #Acción para el botón añadir punto de cada red
        self.Anadir_1.clicked.connect(lambda: self.anadir1(elem1, elem2, elem3, elem4))
        self.Anadir_2.clicked.connect(lambda: self.anadir2(elem1, elem2, elem3, elem4))
        self.Anadir_3.clicked.connect(lambda: self.anadir3(elem1, elem2, elem3, elem4))
        self.Anadir_4.clicked.connect(lambda: self.anadir4(elem1, elem2, elem3, elem4))
        #Acción para el botón de actualizar coordenadas de cada red
        self.re1.clicked.connect(lambda: self.actualizarcampos(elem1, elem2, elem3, elem4))
        self.re2.clicked.connect(lambda: self.actualizarcampos(elem1, elem2, elem3, elem4))
        self.re3.clicked.connect(lambda: self.actualizarcampos(elem1, elem2, elem3, elem4))
        self.re4.clicked.connect(lambda: self.actualizarcampos(elem1, elem2, elem3, elem4))

    #Función para añadir elemento abastecimiento
    def anadir1(self, elem1,elem2,elem3,elem4):
        indelemento= self.TipoElemento_1.currentIndex()
        #Definir los parámetros del punto
        elemento= elem1[indelemento]
        observaciones= self.txtObservaciones_1.text()
        coordX = self.txtX_1.value()
        coordY = self.txtY_1.value()
        #Seleccionar capa
        layer_list = self.listacapas()
        selind = self.SeleccionCapa_1.currentIndex()
        capa=self.seleccioncapa(selind, layer_list, "Abastecimiento")
        #Añadir punto y atributos
        self.anadirpunto(elemento, capa, observaciones, coordX, coordY)
        #Actualizar los campos para poder insertar un nuevo punto desde cero
        self.actualizarcampos(elem1, elem2, elem3, elem4)

    #Función para añadir elemento saneamiento
    def anadir2(self, elem1, elem2, elem3, elem4):
        indelemento=self.TipoElemento_2.currentIndex()
        #Definir los parámetros del punto
        elemento=elem2[indelemento]
        observaciones=self.txtObservaciones_2.text()
        coordX = self.txtX_2.value()
        coordY = self.txtY_2.value()
        # Seleccionar capa
        layer_list = self.listacapas()
        selind = self.SeleccionCapa_2.currentIndex()
        capa=self.seleccioncapa(selind, layer_list, "Saneamiento")
        # Añadir punto y atributos
        self.anadirpunto(elemento, capa, observaciones, coordX, coordY)
        # Actualizar los campos para poder insertar un nuevo punto desde cero
        self.actualizarcampos(elem1, elem2, elem3, elem4)

    #Función para añadir elemento electricidad
    def anadir3(self, elem1, elem2, elem3, elem4):
        indelemento=self.TipoElemento_3.currentIndex()
        #Definir los parámetros del punto
        elemento=elem3[indelemento]
        observaciones=self.txtObservaciones_3.text()
        coordX = self.txtX_3.value()
        coordY = self.txtY_3.value()
        #Seleccionar capa
        selind = self.SeleccionCapa_3.currentIndex()
        layer_list = self.listacapas()
        capa = self.seleccioncapa(selind, layer_list, "Electricidad")
        # Añadir punto y atributos
        self.anadirpunto(elemento, capa, observaciones, coordX, coordY)
        # Actualizar los campos para poder insertar un nuevo punto desde cero
        self.actualizarcampos(elem1, elem2, elem3, elem4)

    #Función para añadir elemento gas
    def anadir4(self, elem1, elem2, elem3, elem4):
        indelemento = self.TipoElemento_4.currentIndex()
        #Definir los parámetros del punto
        elemento = elem4[indelemento]
        observaciones = self.txtObservaciones_4.text()
        coordX = self.txtX_4.value()
        coordY = self.txtY_4.value()
        #Seleccionar capa
        layer_list = self.listacapas()
        selind = self.SeleccionCapa_4.currentIndex()
        capa = self.seleccioncapa(selind, layer_list, "Gas")
        # Añadir punto y atributos
        self.anadirpunto(elemento, capa, observaciones, coordX, coordY)
        # Actualizar los campos para poder insertar un nuevo punto desde cero
        self.actualizarcampos(elem1, elem2, elem3, elem4)

    #Función para crear punto
    def anadirpunto (self, elemento, capa, observaciones, coordX, coordY):
        #Crear punto sobre capa actual
        provider = capa.dataProvider()
        fields = provider.fields()
        features = []
        feature = QgsFeature()
        geompoint1 = QgsGeometry.fromPointXY(QgsPointXY(coordX, coordY))
        feature.setGeometry(geompoint1)
        #Configurar atributos y advertir si la capa no los tiene
        feature.setFields(fields)
        field_index = capa.fields().indexFromName("Elemento")
        if field_index == -1:
            QtWidgets.QMessageBox.information(None, "Atributo erróneo", "No hay un atributo Elemento en esta capa.")
        else:
            feature.setAttribute("Elemento", elemento)
        field_index = capa.fields().indexFromName("Observaciones")
        if field_index == -1:
            QtWidgets.QMessageBox.information(None, "Atributo erróneo", "No hay un atributo Observaciones en esta capa.")
        else:
            feature.setAttribute("Observaciones", observaciones)
        field_index = capa.fields().indexFromName("Coordenada X")
        if field_index == -1:
            QtWidgets.QMessageBox.information(None, "Atributo erróneo", "No hay un atributo Coordenada X en esta capa.")
        else:
            feature.setAttribute("Coordenada X", coordX)
        field_index = capa.fields().indexFromName("Coordenada Y")
        if field_index == -1:
            QtWidgets.QMessageBox.information(None, "Atributo erróneo", "No hay un atributo Coordenada Y en esta capa.")
        else:
            feature.setAttribute("Coordenada Y", coordY)
        features.append(feature)
        provider.addFeatures(features)
        capa.updateExtents()
        #Establecer simbología correspondiente
        self.simbolo(capa)

    #Función para definir categoría simbología
    def simbolo (self, capa):
        categorias=[]
        tipos=capa.uniqueValues(0)
        basepath = os.path.dirname(os.path.realpath(__file__))
        #Definir el símbolo svg para cada tipo de elemento
        for elemento in tipos:
            if elemento=="Acometida":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/acometida.svg")
                self.categoria (symbol, symbol_layer, elemento, categorias)
            elif elemento=="Contador":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/contador.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Valvula":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/valvula.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Ventosa":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/ventosa.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Otro":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/otro.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Aliviadero":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/aliviadero.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Imbornal":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/imbornal.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Pozo de registro":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/pozo.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Generador":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/generador.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Interruptor":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/interruptor.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Transformador":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/transformador.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Torre":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/torre.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Llave":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/llave.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            elif elemento=="Toma de presión":
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol_layer = QgsSvgMarkerSymbolLayer(str(basepath)+"/svg_icon/presion.svg")
                self.categoria(symbol, symbol_layer, elemento, categorias)
            renderer = QgsCategorizedSymbolRenderer('Elemento', categorias)
            if renderer is not None:
                capa.setRenderer(renderer)

    #Función para crear la categoría de simbología correspondiente a cada elemento
    def categoria (self, symbol, symbol_layer, elemento, categorias):
        symbol_layer.setSize(10)
        if symbol_layer is not None:
            symbol.changeSymbolLayer(0, symbol_layer)
        categoria = QgsRendererCategory(elemento, symbol, str(elemento))
        categorias.append(categoria)

    #Función para actualizar los campos en cada iteracción
    def actualizarcampos(self, elem1, elem2, elem3, elem4):
        #Establecer coordenadas del GPS si existe o vaciar si no hay señal
        coordenadas=self.coordgps()
        if len(coordenadas)==2:
            longitud=coordenadas[0]
            latitud=coordenadas[1]
            self.txtX_1.setValue(longitud)
            self.txtY_1.setValue(latitud)
            self.txtX_2.setValue(longitud)
            self.txtY_2.setValue(latitud)
            self.txtX_3.setValue(longitud)
            self.txtY_3.setValue(latitud)
            self.txtX_4.setValue(longitud)
            self.txtY_4.setValue(latitud)
        else:
            self.txtX_1.clear()
            self.txtY_1.clear()
            self.txtX_2.clear()
            self.txtY_2.clear()
            self.txtX_3.clear()
            self.txtY_3.clear()
            self.txtX_4.clear()
            self.txtY_4.clear()
        #Vaciar todos los campos campos
        self.SeleccionCapa_1.clear()
        self.SeleccionCapa_2.clear()
        self.SeleccionCapa_3.clear()
        self.SeleccionCapa_4.clear()
        self.TipoElemento_1.clear()
        self.TipoElemento_2.clear()
        self.TipoElemento_3.clear()
        self.TipoElemento_4.clear()
        self.txtObservaciones_1.clear()
        self.txtObservaciones_2.clear()
        self.txtObservaciones_3.clear()
        self.txtObservaciones_4.clear()
        #Mostrar lista de capas tipo punto
        layer_list=self.listacapas()
        #Advertencia si no hay capas tipo punto
        if len(layer_list) < 2:
            QtWidgets.QMessageBox.information(None, "No hay capas tipo punto", "No hay ninguna capa de tipo punto. Carga una capa de tipo punto o cree una nueva a continuación")
        self.SeleccionCapa_1.addItems(layer_list)
        self.SeleccionCapa_2.addItems(layer_list)
        self.SeleccionCapa_3.addItems(layer_list)
        self.SeleccionCapa_4.addItems(layer_list)
        #Mostrar tipo de elemento para cada red
        self.TipoElemento_1.addItems(elem1)
        self.TipoElemento_2.addItems(elem2)
        self.TipoElemento_3.addItems(elem3)
        self.TipoElemento_4.addItems(elem4)

    #Función para determinar la capa sobre la que añadir elementos
    def seleccioncapa(self, selind, layer_list, red):
        selected = layer_list[selind]
        #Crear nueva capa si se selecciona esta opción
        if selected=="Nueva Capa":
            capa = QgsVectorLayer("Point?crs=EPSG:25830&field=Elemento:string(255)" + "&field=Observaciones:string(255)"
                                  + "&field=Coordenada X:double" + "&field=Coordenada Y:double", "Elementos Red " +str(red), "memory")
            QgsProject.instance().addMapLayer(capa)
        else:
            capa = QgsProject.instance().mapLayersByName(selected)[0]
        return capa

    #Función para mostrar lista de capas tipo punto
    def listacapas(self):
        layer_list = []
        for layer in QgsProject.instance().mapLayers().values():
            if layer.type() == QgsMapLayer.VectorLayer and layer.geometryType() == QgsWkbTypes.PointGeometry:
                layer_list.append(layer.name())
        layer_list.append('Nueva Capa')
        return layer_list

    #Función para leer las coordenadas del GPS
    def coordgps (self):
        connectionRegistry = QgsApplication.gpsConnectionRegistry()
        connectionList = connectionRegistry.connectionList()
        coordenadas = []
        gps = QgsCoordinateReferenceSystem(4326)
        crsAuthId = QgsProject.instance().crs().authid()
        crs= QgsCoordinateReferenceSystem()
        crs.createFromUserInput(crsAuthId)
        tform = QgsCoordinateTransform(gps, crs, QgsProject.instance())
        #Advertencia si no hay GPS conectado
        if connectionList == []:
            QtWidgets.QMessageBox.information(None, "GPS no conectado",
                                              "Conecta un GPS para obtener las coordenadas.\nMientras tanto, puede introducirlas manualmente.")
        #Transformación de coordenadas al sistema actual
        else:
            GPSInfo = connectionList[0].currentGPSInformation()
            x,y = tform.transform(GPSInfo.longitude, GPSInfo.latitude)
            coordenadas.append(x)
            coordenadas.append(y)
        return coordenadas